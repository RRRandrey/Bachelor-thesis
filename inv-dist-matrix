## Создание матрицы обратных расстояний с помощью Python
# ======================================================

# В этом файле я показываю, как построить матрицу обратных расстояний 
# с помощью данных о координатах региональных столиц


# ======================================================
# 1-й этап. Парсинг координат региональных столиц
# ======================================================


## Библиотеки
# ======================================================

import numpy as np
import pandas as pd
import requests as rq
import re
from bs4 import BeautifulSoup
from math import asin, sqrt, sin, cos
from sklearn.preprocessing import normalize


## Ссылки на сайты с координатами и списком субъектов РФ
# ======================================================

url1 = 'https://time-in.ru/coordinates/russia?ysclid=ls092pt3x2449892952'
url2 = 'https://wiki.openstreetmap.org/wiki/RU:Россия/Субъекты_РФ'


## Запросы (оба успешные)
# ======================================================

response1 = rq.get(url1)
response2 = rq.get(url2)

print(response1)
print(response2)

# <Response [200]>
# <Response [200]>


## Преобразование запросов в текст html
# ======================================================

soup1 = BeautifulSoup(response1.text, 'html.parser')
soup2 = BeautifulSoup(response2.text, 'html.parser')


## Список всех российских городов
# ======================================================

cities = []
for tag in soup1.find_all('a', {'class':'coordinates-items-left'}):
  cities.append(tag.text)


# Координаты российских городов
# ======================================================

coordinates = []
for tag in soup1.find_all('div'):
  coordinates.append(tag.text)

coordinates = coordinates[coordinates.index('55.75, 37.62'):coordinates.index('55.07, 32.7') + 1]


## Необработанный список регионов и их административных центров российских регионов
# ======================================================

capitals = []

for tag in soup2.find_all('a'):
  capitals.append(tag.text)

capitals = capitals[capitals.index('Республика Адыгея'):]
capitals = capitals[: capitals.index('Салехард') + 1]


## Обработанный список российских регионов и их административных центров
# ======================================================

for i in capitals:
  if i == '' or i == 'форум' or i == 'Автономная область' or i == 'Автономные округа' :
    capitals.remove(i)

r = re.compile('[^0-9]+')
capitals = list(filter(r.match, capitals))


## Разделение списка на регионы и их административные центры
# ======================================================

Region = []
Capitals = []

for i in range(0, len(capitals)):
  if i == 0 or i % 2 == 0:
    Region.append(capitals[i])
  else:
    Capitals.append(capitals[i])


# ======================================================
# 2-й этап. Создание датафреймов.
# ======================================================

